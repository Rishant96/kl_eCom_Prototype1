@model kl_eCom.Web.Areas.Vendors.Models.StoreCreateViewModel
@{
    ViewBag.Title = "Store - Create";
}

<div class="container">
    <h2>Create Store</h2>

    @using (@Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(m => m.CurrencyType)
        <div class="form-group">
            @Html.LabelFor(m => m.CurrencyType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Label(Model.CurrencyType, new { @class = "control-label" })
            </div>
        </div>

        <div class="col-md-offset-1">
            <div class="form-group">
                <h4>Address :</h4>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Line1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Line1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Line1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Line2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Line2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Line2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Line3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Line3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Line3, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Zip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Zip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Country", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Country, new SelectList(Model.Countries, "Value", "Text"), "Please select a country", new {
                    @class = "form-control", id = "Country" })
                @Html.ValidationMessageFor(m => m.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("State", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.State, new SelectList(Model.States, "Value", "Text"), new {
                    @class = "form-control", id = "State" })
                @Html.ValidationMessageFor(m => m.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.City, new SelectList(Model.Cities, "Value", "Text"), new {
                    @class = "form-control", id = "City" })
                @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Market", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Market, new SelectList(Model.Markets, "Value", "Text"), new {
                    @class = "form-control", id = "Market" })
                @Html.ValidationMessageFor(m => m.Market, "", new { @class = "text-danger" })
            </div>
        </div>

        <input type="submit" class="btn btn-info col-md-offset-2" value="Create" />
    </div>
    }
</div>

@section scripts {
    <script>
    $(document).ready(function () {
        $('#Country').change(function () {
            var selectedCountry = $('#Country').val();
            var statesSelect = $('#State');
            statesSelect.empty();
            $("#City").empty();
            $("#Market").empty();
            if (selectedCountry != null && selectedCountry != "") {
                $.getJSON('@Url.Action("GetStates")', { idStr: selectedCountry }, function (states) {
                    if (states != null && !jQuery.isEmptyObject(states)) {
                        statesSelect.append($('<option/>', {
                            value: null,
                            text: "--- Select a state ---"
                        }));
                        $.each(states, function (index, state) {
                            statesSelect.append($('<option/>', {
                                value: state.Value,
                                text: state.Text
                            }));
                        });
                    };
                });
            }
        });

        $('#State').change(function () {
            var selectedState = $('#State').val();
            var citiesSelect = $('#City');
            citiesSelect.empty();
            $("#Market").empty();
            if (selectedState != null && selectedState != "") {
                $.getJSON('@Url.Action("GetCities")', { idStr: selectedState }, function (cities) {
                    if (cities != null && !jQuery.isEmptyObject(cities)) {
                        citiesSelect.append($('<option/>', {
                            value: null,
                            text: "--- Select a city ---"
                        }));
                        $.each(cities, function (index, state) {
                            citiesSelect.append($('<option/>', {
                                value: state.Value,
                                text: state.Text
                            }));
                        });
                    };
                });
            }
        });

        $('#City').change(function () {
            var selectedState = $('#City').val();
            var citiesSelect = $('#Market');
            citiesSelect.empty();
            if (selectedState != null && selectedState != "") {
                $.getJSON('@Url.Action("GetMarkets")', { idStr: selectedState }, function (cities) {
                    if (cities != null && !jQuery.isEmptyObject(cities)) {
                        citiesSelect.append($('<option/>', {
                            value: null,
                            text: "--- Select a market ---"
                        }));
                        $.each(cities, function (index, state) {
                            citiesSelect.append($('<option/>', {
                                value: state.Value,
                                text: state.Text
                            }));
                        });
                    };
                });
            }
        });
    });
    </script>
}